return(percs*circ.load.avg[[x]])
})
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
x <- 1
y <- 1
kwh.dat <- (circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y])
toplot <- kwh.dat[1:92]
toplot <- data.table(time = dat.seq[1:92],
kwh = kwh.dat[1:92])
ggplot(toplot, mapping=aes(x=time, y=kwh)) + geom_point() + geom_line()
kwh.dat <- .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y])
toplot <- data.table(time = dat.seq[1:92],
kwh = kwh.dat[1:92])
kwh.dat <- .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y])
ggplot(toplot, mapping=aes(x=time, y=kwh)) + geom_point() + geom_line()
set.seed(42)
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
set.seed(42)
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
set.seed(42)
sub.load.avg  <- sample(500:3000, substation.count)
circ.load.avg <- lapply(sub.load.avg, function(x) {
return(sample((x-250):(x+250), circuit.count))
})
sub.sav.avg <- sample(seq(.5, 4.5, by=.1), substation.count)
circ.sav.avg <- lapply(sub.sav.avg, function(x) {
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
})
sub.dev.avg <- sample(seq(.01,.07,.01), substation.count)
circ.dev.avg <- lapply(sub.dev.avg, function(x) {
percs <- sample(seq((x-.02),(x+.02), .001), circuit.count)
return(percs*circ.load.avg[[x]])
})
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]))
dates <- unique(date(dat$timestamp))
1/7
1/7*365
random.days <- sample(1:7, 50)
random.days <- sample(7, 50)
?sample
random.days <- sample(1:7, 50, replace=T)
random.days
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y])) %>%
mutate(week = week(timestamp))
head(dat)
table(dat$week)
wday(dat$timestamp[1])
?rnorm
volt <- rnorm(8760, mean = 120, sd = 3)
volt[1:10]
volt <- rnorm(8760, mean = 120, sd = 1)
volt[1:10]
volt <- rnorm(8760, mean = 120, sd = .5)
volt[1:10]
volt <- rnorm(8760, mean = 120, sd = .25)
volt[1:10]
circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]
return(sample(seq((x-.25),(x+.25), .1), circuit.count))
rnorm(1, sd=50)
z <- 1
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]),
volt = rnorm(8760, mean = 120, sd = .25)) %>%
mutate(week = week(timestamp),
date = date(timestamp)) %>%
split(.$week)
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + rnorm(1, sd=30))))
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + rnorm(1, sd=30)), kwh))
View(rez)
ggplot(rez[1:92,], mapping=aes(x=timestamp,y=kwh)) + geom_point() + geom_line()
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + rnorm(1, sd=30)), kwh))
rez$test <- rez$kwh - rez$kwh.n
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] +
rnorm(8760, sd=.1*(circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]))), kwh))
adj <- rnorm(8760, sd=.1*(circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y])))
adj <- rnorm(8760, sd=.1*(circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]))
adj{1:50}
adj[1:50]
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + adj, kwh))
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + adj[nrow(.)], kwh))
})
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + adj[nrow(.)]), kwh))
rez$test <- rez$kwh - rez$kwh.n
sample(adj, 1)
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh.n = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y] + sample(adj, 1)), kwh))
rez$test <- rez$kwh - rez$kwh.n
m <- as.factor(rez$mode)
adj <- rnorm(8760, sd=.1*(circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]))
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]), kwh))
xloc <- which(rez$mode=="ON")
adj[xloc] <- 0
adj
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]),
volt = rnorm(8760, mean = 120, sd = .25)) %>%
mutate(week = week(timestamp),
date = date(timestamp)) %>%
split(.$week)
dat <- lapply(1:length(random.days), function(z) {
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]), kwh)) %>%
return()
})
random.days <- sample(7, 52)
random.days <- sample(7, 52, replace=T)
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]),
volt = rnorm(8760, mean = 120, sd = .25)) %>%
mutate(week = week(timestamp),
date = date(timestamp)) %>%
split(.$week)
dat <- lapply(1:length(random.days), function(z) {
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]), kwh)) %>%
return()
}) %>% rbindlist()
random.days <- sample(7, 53, replace=T)
dat <- data.table(timestamp = dat.seq,
kwh = .5*(circ.load.avg[[x]][y])*sin(((2*pi)/24)*(0:8759)+pi) + circ.load.avg[[x]][y] + rnorm(8760, sd=circ.dev.avg[[x]][y]),
volt = rnorm(8760, mean = 120, sd = .25)) %>%
mutate(week = week(timestamp),
date = date(timestamp)) %>%
split(.$week)
dat <- lapply(1:length(random.days), function(z) {
rez <- dat[[z]] %>%
mutate(mode = ifelse(wday(date)==random.days[z], "OFF", "ON")) %>%
mutate(kwh = ifelse(mode=="OFF", kwh - (circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]), kwh)) %>%
return()
}) %>% rbindlist()
adj <- rnorm(8760, sd=.1*(circ.sav.avg[[x]][y]/100*circ.load.avg[[x]][y]))
xloc <- which(rez$mode=="ON")
xloc <- which(dat$mode=="ON")
adj[xloc] <- 0
adj
rnorm(8760, sd=.1*(120))
rnorm(8760, sd=.05*(120))
rnorm(8760, sd=.01*(120)
rnorm(8760, sd=.01*(120))
volt.adj <- rnorm(8760, sd=.01*(120))
volt.adj[1]
volt.adj[2]
volt.adj[3]
volt.adj[1:10]
.01*120
volt.adj <- rnorm(8760, sd=1)
volt.adj[1:50]
source('~/MV Software/Develop Proxy CVR Data.R', echo=TRUE)
source('~/MV Software/Develop Proxy CVR Data.R', echo=TRUE)
source('~/MV Software/Develop Proxy CVR Data.R', echo=TRUE)
View(circ.data)
source('~/MV Software/Develop Proxy CVR Data.R', echo=TRUE)
saveRDS(circ.data, "./ProxyCVRData.rds")
runApp('MV Software')
fwrite(circ.data, "./ProxyCVRData.csv")
runApp('MV Software')
runApp('MV Software')
runApp('MV Software')
runApp('MV Software')
library(devtools)
?devtools
?usethis
devtools::install_github("r-lib/rlang", build_vignettes = T)
verison
version
setwd("~/1) Projects/HouseConsumption")
.x <- c("data.table", "dplyr", "lubridate")
lapply(.x, library, character.only=T)
#'
#' Determines an estimate for energy savings due to
#' the installation of a tankless water heater
#'
### INITIALIZATION --------------------------------------------------------------------------------
.x <- c("data.table", "dplyr", "lubridate")
lapply(.x, library, character.only=T)
setwd("~/1) Projects/HouseConsumption/")
### DATA READ & CLEAN -----------------------------------------------------------------------------
consum <- fread("./1000293732202460849-18408.csv")
consum <- read.csv("./1000293732202460849-18408.csv")
View(consum)
View(consum)
consum <- read.csv("./1000293732202460849-18408_Demand.csv")
consum <- fread("./1000293732202460849-18408_Demand.csv")
consum <- read.csv("./1000293732202460849-18408_Demand.csv")
consum <- read.csv("./1000293732202460849-18408_Demand.csv", row.names=F)
consum <- read.csv("./1000293732202460849-18408_Demand.csv", row.names=T)
library(readrt)
library(readr)
consum <- read_csv("./1000293732202460849-18408_Demand.csv", row.names=T)
consum <- read_csv("./1000293732202460849-18408_Demand.csv")
View(consum)
head(consum)
consum <- read_csv("./1000293732202460849-18408_Demand.csv") %>%
select(-Name, -Address, -`Account #`, -MeterID, -`Premise ID`)
consum <- read.csv("./1000293732202460849-18408.csv") %>%
select(-Name, -Address, -Account, -CUSTOMER.CODE,
-PREMISE.CODE, -MeterID)
fwrite(consum, "./1000293732202460849-18408.csv")
consum <- read_csv("./1000293732202460849-18408_Demand.csv") %>%
select(-Name, -Address, -`Account #`, -MeterID, -`Premise ID`)
fwrite(consum, "./1000293732202460849-18408.csv")
consum <- read.csv("./1000293732202460849-18408.csv") %>%
select(-Name, -Address, -Account, -CUSTOMER.CODE,
-PREMISE.CODE, -MeterID)
fwrite(consum, "./1000293732202460849-18408.csv")
consum <- read_csv("./1000293732202460849-18408_Demand.csv") %>%
select(-Name, -Address, -`Account #`, -MeterID, -`Premise ID`)
fwrite(consum, "./1000293732202460849-18408_Demand.csv")
# Dropping personally identifying information before github upload
consum <- read.csv("./1000293732202460849-18408.csv") %>%
select(-Name, -Address, -Account, -CUSTOMER.CODE,
-PREMISE.CODE, -MeterID)
fwrite(consum, "./1000293732202460849-18408.csv")
demand <- read_csv("./1000293732202460849-18408_Demand.csv") %>%
select(-Name, -Address, -`Account #`, -MeterID, -`Premise ID`)
fwrite(demand, "./1000293732202460849-18408_Demand.csv")
consum <- read.csv("./1000293732202460849-18408.csv")
demand <- read_csv("./1000293732202460849-18408_Demand.csv")
consum <- read.csv("./1000293732202460849-18408.csv") %>%
select(-Name, -Address, -Account, -CUSTOMER.CODE,
-PREMISE.CODE, -MeterID)
fwrite(consum, "./1000293732202460849-18408.csv")
demand <- read_csv("./1000293732202460849-18408_Demand.csv") %>%
select(-Name, -Address, -`Account #`, -MeterID, -`Premise ID`)
fwrite(demand, "./1000293732202460849-18408_Demand.csv")
library(ggplot2)
demand <- read_csv("./1000293732202460849-18408_Demand.csv", stringsAsFactors = F)
consum <- read.csv("./1000293732202460849-18408.csv", stringsAsFactors = F)
View(consum)
maindat <- consum %>%
mutate(timestamp = ymd_hms(gsub("T|Z", " ", startTime)))
View(maindat)
table(maindat$ServiceType)
summary(consum)
table(consum$readingStatusCode)
maindat <- consum %>%
mutate(timestamp = ymd_hms(gsub("T|Z", " ", startTime))) %>%
mutate(timestmap = floor_date(timestamp, unit="hour")) %>%
group_by(timestamp) %>%
summarise(kwh = mean(value))
maindat <- consum %>%
mutate(timestamp = ymd_hms(gsub("T|Z", " ", startTime))) %>%
mutate(timestmap = floor_date(timestamp, unit="hour")) %>%
group_by(timestamp) %>%
summarise(kwh = mean(value)) %>%
filter(year(timestamp)==2020)
ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) + geom_point() + geom_line()
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() + geom_vline(xintercept = ymd_hms("2020-02-22 00:00:00")))
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() + geom_vline(xintercept = as.numeric(ymd_hms("2020-02-22 00:00:00"))))
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() + geom_vline(xintercept = as.numeric(("2020-02-22 00:00:00"))))
ymd_hms("2020-02-22 00:00:00")
as.numeric(ymd_hms("2020-02-22 00:00:00"))
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() + geom_vline(xintercept = maindat$timestamp[which(maindat$timestamp=="2020-02-22 00:00:00")]))
which(maindat$timestamp=="2020-02-22 00:00:00")]
which(maindat$timestamp=="2020-02-22 00:00:00")
which(maindat$timestamp=="2020-02-22 00:00:00")
which(maindat$timestamp==ymd_hms("2020-02-22 00:00:00"))
maindat$timestamp[1]
which(as.character(maindat$timestamp)==ymd_hms("2020-02-22 00:00:00"))
which(as.character(maindat$timestamp)=="2020-02-22 00:00:00")
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() + geom_vline(xintercept = 150))
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() + geom_vline(xintercept = as.numeric(ymd("2020-02-22"))))
as.numeric(ymd("2020-02-22"))
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() + geom_vline(xintercept = as.numeric(ymd_hms("2020-02-22 00:00:00"))))
as.numeric(ymd_hms("2020-02-22 00:00:00"))
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() + geom_vline(xintercept = as.numeric(ymd_hms("2020-02-22 01:00:00"))))
maindat <- consum %>%
mutate(timestamp = ymd_hms(gsub("T|Z", " ", startTime))) %>%
mutate(timestamp = floor_date(timestamp, unit="hour")) %>%
group_by(timestamp) %>%
summarise(kwh = mean(value)) %>%
filter(year(timestamp)==2020) %>%
mutate(timestamp)
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() + geom_vline(xintercept = as.numeric(ymd_hms("2020-02-22 01:00:00"))))
maindat$timestamp[which(maindat$timestamp==ymd_hms("2020-02-22 00:00:00"))]
which(maindat$timestamp==ymd_hms("2020-02-22 00:00:00"))
which(maindat$timestamp==ymd_hms("2020-01-22 00:00:00"))
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() + geom_vline(xintercept = as.numeric(ymd_hms("2020-01-22 01:00:00"))))
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() +
geom_vline(xintercept = as.numeric(ymd_hms("2020-01-22 00:00:00"))) +
geom_vline(xintercept = as.numeric(ymd_hms("2020-01-26 00:00:00"))))
weather <- fread("./724880-2020.csv")
weather <- fread("./724880-2020.csv") %>%
mutate(timestamp = ymd_hms(date_local)) %>%
select(timestamp, temp)
maindat <- consum %>%
mutate(timestamp = ymd_hms(gsub("T|Z", " ", startTime))) %>%
mutate(timestamp = floor_date(timestamp, unit="hour")) %>%
group_by(timestamp) %>%
summarise(kwh = mean(value)) %>%
filter(year(timestamp)==2020) %>%
merge(weather, by='timestamp')
head(maindat)
seq(ymd("2019-01-16"), ymd("2019-01-20"), by="day")
weather <- fread("./724880-2020.csv") %>%
mutate(timestamp = ymd_hms(date_local)) %>%
select(timestamp, temp) %>%
mutate(HDD = ifelse(temp < 65, (65-temp)/24, 0))
View(weather)
weather <- fread("./724880-2020.csv") %>%
mutate(timestamp = ymd_hms(date_local)) %>%
select(timestamp, temp) %>%
mutate(HDD = ifelse(temp < 65, (65-temp)/24, 0))
maindat <- consum %>%
mutate(timestamp = ymd_hms(gsub("T|Z", " ", startTime))) %>%
mutate(timestamp = floor_date(timestamp, unit="hour")) %>%
group_by(timestamp) %>%
summarise(kwh = mean(value)) %>%
filter(year(timestamp)==2020) %>%
merge(weather, by='timestamp')
head(mindat)
head(maindat)
filter(maindat, timestamp >= ymd_hms("2020-01-27 00:00:00"))
nrow(filter(maindat, timestamp >= ymd_hms("2020-01-27 00:00:00")))
264/24
max(maindat$timestamp)
prePeriod <- filter(maindat, timestamp >= ymd("2020-01-06"), timestamp < ymd("2020-01-17"))
postPeriod <- filter(maindat, timestamp >= ymd("2020-01-27"))
panel <- bind_rows(prePeriod,postPeriod)
prePeriod <- maindat %>%
filter(timestamp >= ymd("2020-01-06"), timestamp < ymd("2020-01-17")) %>%
mutate(post=0)
postPeriod <- maindat %>%
filter(timestamp >= ymd("2020-01-27")) %>%
mutate(post=1)
panel <- bind_rows(prePeriod,postPeriod)
reg <- lm(kwh ~ post*HDD, data=panel)
library(broom)
tidy(reg)
glance(reg)
reg <- lm(kwh ~ post, data=panel)
tidy(reg)
glance(reg)
panel %>% group_by(post) %>% summarise(kwh=mean(kwh))
1.62-1.55
mean(postPeriod$HDD)
.349*1.044622-.334
ggplot(panel, mapping=aes(x=HDD,y=kwh)) + geom_point()
maindat <- consum %>%
mutate(timestamp = ymd_hms(gsub("T|Z", " ", startTime))) %>%
mutate(timestamp = floor_date(timestamp, unit="hour")) %>%
group_by(timestamp) %>%
summarise(kwh = mean(value)) %>%
merge(weather, by='timestamp')
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() +
geom_vline(xintercept = as.numeric(ymd_hms("2020-01-22 00:00:00"))) + # Time when hot water heater cut out
geom_vline(xintercept = as.numeric(ymd_hms("2020-01-26 00:00:00")))) # Time when new heater was installed
# Pull same amount of days pre and post with same day of week mix
prePeriod <- maindat %>%
filter(timestamp >= ymd("2019-12-30"), timestamp < ymd("2020-01-09")) %>%
mutate(post=0)
postPeriod <- maindat %>%
filter(timestamp >= ymd("2020-01-27")) %>%
mutate(post=1)
panel <- bind_rows(prePeriod,postPeriod)
reg <- lm(kwh ~ post*DD, data=panel)
tidy(reg)
glance(reg)
reg <- lm(kwh ~ post*HDD, data=panel)
tidy(reg)
glance(reg)
reg <- lm(kwh ~ post, data=panel)
tidy(reg)
glance(reg)
.0757*24
.0757*24*365
.0757*24*365*.11
.460*mean(postPeriod$HDD)
.460*mean(postPeriod$HDD)-.553
.460*mean(postPeriod$HDD)-.552
maindat <- consum %>%
mutate(timestamp = ymd_hms(gsub("T|Z", " ", startTime))) %>%
mutate(timestamp = floor_date(timestamp, unit="hour")) %>%
group_by(timestamp) %>%
summarise(kwh = mean(value)) %>%
filter(year(timestamp)==2020) %>%
merge(weather, by='timestamp')
plot(ggplot(maindat, mapping=aes(x=timestamp,y=kwh)) +
geom_point() + geom_line() +
geom_vline(xintercept = as.numeric(ymd_hms("2020-01-22 00:00:00"))) + # Time when hot water heater cut out
geom_vline(xintercept = as.numeric(ymd_hms("2020-01-26 00:00:00")))) # Time when new heater was installed
# Pull same amount of days pre and post with same day of week mix
prePeriod <- maindat %>%
filter(timestamp < ymd("2020-01-16")) %>%
mutate(post=0)
postPeriod <- maindat %>%
filter(timestamp >= ymd("2020-01-27")) %>%
mutate(post=1)
panel <- bind_rows(prePeriod,postPeriod)
reg <- lm(kwh ~ post*HDD, data=panel)
tidy(reg)
glance(reg)
tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2]
data.table(HourlySavings=tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2],
DailySavings=24*tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2],
AnnualSavings=24*365*tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2])
data.table(HourlyEnergySavings=tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2],
DailyEnergySavings=24*(tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2]),
AnnualEnergySavings=24*365*(tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2]),
AnnualMoneySavings=.11*24*365*(tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2]))
data.table(HourlyEnergySavings=-tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2],
DailyEnergySavings=-24*(tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2]),
AnnualEnergySavings=-24*365*(tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2]),
AnnualMoneySavings=-.11*24*365*(tidy(reg)$estimate[4]*mean(postPeriod$HDD) + tidy(reg)$estimate[2]))
